import express from 'express';
import { authenticateToken, AuthRequest } from '../middleware/auth';
import OpenAI from 'openai';

const router = express.Router();

// Initialize OpenAI client with proper error handling
let openai: OpenAI | null = null;
try {
  if (process.env.OPENAI_API_KEY) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }
} catch (error) {
  console.warn('OpenAI client initialization failed:', error);
}

// Generate website code using AI
router.post('/generate', authenticateToken, async (req: AuthRequest, res) => {
  try {
    const { description, type = 'website', features = [] } = req.body;

    if (!description) {
      return res.status(400).json({ message: 'Description is required' });
    }

    if (!openai) {
      // Demo mode - generate a sample website when API key is not configured
      const demoCode = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Generated Website - ${type.charAt(0).toUpperCase() + type.slice(1)}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Arial', sans-serif; 
            line-height: 1.6; 
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px;
        }
        header { 
            text-align: center; 
            padding: 60px 0; 
            color: white;
        }
        h1 { 
            font-size: 3rem; 
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .subtitle { 
            font-size: 1.2rem; 
            opacity: 0.9;
            margin-bottom: 2rem;
        }
        .content {
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin: 20px 0;
        }
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }
        .feature {
            text-align: center;
            padding: 20px;
            border-radius: 10px;
            background: #f8f9fa;
            transition: transform 0.3s ease;
        }
        .feature:hover {
            transform: translateY(-5px);
        }
        .cta {
            text-align: center;
            margin: 40px 0;
        }
        .btn {
            display: inline-block;
            padding: 15px 30px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 25px;
            transition: all 0.3s ease;
        }
        .btn:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }
        @media (max-width: 768px) {
            h1 { font-size: 2rem; }
            .content { padding: 20px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Welcome to My ${type.charAt(0).toUpperCase() + type.slice(1)}</h1>
            <p class="subtitle">${description}</p>
        </header>
        
        <div class="content">
            <h2>About This Project</h2>
            <p>This is a demo website generated by our AI Website Builder. In a real implementation with proper API keys, this would be a fully customized website based on your specific requirements.</p>
            
            <div class="features">
                ${features.map((feature: string) => `
                <div class="feature">
                    <h3>${feature}</h3>
                    <p>This feature would be implemented based on your requirements.</p>
                </div>
                `).join('')}
            </div>
            
            <div class="cta">
                <a href="#contact" class="btn">Get Started</a>
            </div>
        </div>
    </div>
    
    <script>
        // Simple interactive features
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Website loaded successfully!');
            
            // Add click events to features
            const features = document.querySelectorAll('.feature');
            features.forEach(feature => {
                feature.addEventListener('click', function() {
                    alert('Feature: ' + this.querySelector('h3').textContent);
                });
            });
        });
    </script>
</body>
</html>`;

      return res.json({
        success: true,
        code: demoCode,
        description,
        type,
        features,
        generatedAt: new Date(),
        tokens: 0,
        demo: true,
        message: 'Demo mode: To use real AI generation, configure your OpenAI API key.'
      });
    }

    // Create a detailed prompt for website generation
    const prompt = `Create a complete, functional ${type} based on this description: "${description}"

Additional features requested: ${features.join(', ')}

Please generate:
1. A complete HTML file with embedded CSS and JavaScript
2. Modern, responsive design using CSS Grid/Flexbox
3. Clean, professional styling
4. Interactive elements where appropriate
5. Mobile-friendly design

The website should be fully functional and ready to use. Include all necessary HTML, CSS, and JavaScript in a single HTML file.

Please provide ONLY the HTML code without any explanation or markdown formatting.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are an expert web developer who creates beautiful, functional websites. Generate clean, modern HTML/CSS/JS code."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 3000,
      temperature: 0.7,
    });

    const generatedCode = completion.choices[0]?.message?.content || '';

    // Clean up the response to ensure it's valid HTML
    const cleanedCode = generatedCode.replace(/```html/g, '').replace(/```/g, '').trim();

    res.json({
      success: true,
      code: cleanedCode,
      description,
      type,
      features,
      generatedAt: new Date(),
      tokens: completion.usage?.total_tokens || 0
    });

  } catch (error) {
    console.error('AI generation error:', error);
    res.status(500).json({ 
      message: 'Failed to generate website',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Generate with Gemini as backup/alternative
router.post('/generate-gemini', authenticateToken, async (req: AuthRequest, res) => {
  try {
    // For now, we'll implement a simple fallback
    // In a real implementation, you would integrate with Google's Gemini API
    res.status(501).json({
      message: 'Gemini integration coming soon',
      fallback: 'Please use the OpenAI endpoint for now'
    });
  } catch (error) {
    console.error('Gemini generation error:', error);
    res.status(500).json({ 
      message: 'Failed to generate website with Gemini',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get AI generation history for user
router.get('/history', authenticateToken, async (req: AuthRequest, res) => {
  try {
    // For now, return empty array as we're not storing history in DB
    // In a full implementation, you'd store generation history in a model
    res.json({
      history: [],
      message: 'History feature coming soon'
    });
  } catch (error) {
    console.error('History retrieval error:', error);
    res.status(500).json({ 
      message: 'Failed to retrieve history',
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;